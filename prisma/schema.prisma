// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String       @id @default(uuid())
    name         String
    email        String       @unique
    image        String?
    role         Role
    CreatorSpace Space[]
    SpaceUsers   SpaceUsers[]
    upVote       UpVote[]
}

model Space {
    id          String       @id @default(uuid())
    streamerId  String
    Streamer    User         @relation(fields: [streamerId], references: [id])
    createdAt   DateTime     @default(now())
    isActive    Boolean      @default(false)
    title       String?
    description String?
    current     SongQueue[]
    SpaceUsers  SpaceUsers[]
}

// This is the smtream which is part of a space and where different users can come and paste the songs
model SongQueue {
    id             String     @id @default(uuid())
    type           StreamType
    active         Boolean    @default(true)
    url            String
    title          String     @default("")
    smallImg       String     @default("")
    bigImg         String     @default("")
    extractedId    String
    played         Boolean    @default(false)
    playedTs       Int        @default(0)
    currentPlaying Boolean    @default(false)
    Space          Space      @relation(fields: [spaceId], references: [id])
    spaceId        String
    upVote         UpVote[]
    songByUserId   String
    SongByUsers    SpaceUsers @relation(fields: [songByUserId], references: [userId])
}

// This stores data for Users inside a particular stream
model SpaceUsers {
    id        String      @id @default(uuid())
    userId    String
    user      User        @relation(fields: [userId], references: [id])
    Space     Space       @relation(fields: [spaceId], references: [id])
    spaceId   String
    SongQueue SongQueue[]

    @@unique([userId])
}

model UpVote {
    id     String    @id @default(uuid())
    userId String
    user   User      @relation(fields: [userId], references: [id])
    songId String
    stream SongQueue @relation(fields: [songId], references: [id])

    @@unique([userId, songId])
}

enum StreamType {
    Youtube
    Spotify
}

enum Role {
    Streamer
    EndUser
}
