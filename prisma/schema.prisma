// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String              @id @default(uuid())
    email             String              @unique
    provider          Provider
    // For creators
    streams           Stream[]
    UpVote            UpVote[]
    role              Role
    // For Users 
    CurrentSpaceUsers CurrentSpaceUsers[]
}

model Stream {
    id          String              @id @default(uuid())
    type        StreamType
    active      Boolean             @default(true)
    url         String
    title       String              @default("")
    smallImg    String              @default("")
    bigImg      String              @default("")
    extractedId String
    upVotes     UpVote[]
    creatorId   String
    creator     User                @relation(fields: [creatorId], references: [id])
    user        CurrentSpaceUsers[]
}

model CurrentSpaceUsers {
    id       String  @id @default(uuid())
    userId   String
    user     User    @relation(fields: [userId], references: [id])
    Stream   Stream? @relation(fields: [streamId], references: [id])
    streamId String?
}

model UpVote {
    id       String @id @default(uuid())
    userId   String
    user     User   @relation(fields: [userId], references: [id])
    streamId String
    stream   Stream @relation(fields: [streamId], references: [id])

    @@unique([userId, streamId])
}

enum StreamType {
    Spotify
    Youtube
}

enum Role {
    Streamer
    EndUser
}

enum Provider {
    Google
}
